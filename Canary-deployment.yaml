#Install Argo Rollouts

kubectl create namespace argo-rollouts
kubectl apply -n argo-rollouts -f https://github.com/argoproj/argo-rollouts/releases/latest/download/install.yaml

#Verify installation
kubectl get pods -n argo-rollouts
----------------------------------------------------------------------------------------------------------------------
#Deploy Base Service (Stable v1)

apiVersion: v1
kind: Service
metadata:
  name: myapp-service
spec:
  selector:
    app: myapp
  ports:
    - port: 80
      targetPort: 8080
  type: ClusterIP

#kubectl apply -f service.yaml
----------------------------------------------------------------------------------------------------------------------
#Create Canary Rollout (v1 → v2) ( Argo Rollout )

# rollout.yaml
apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: myapp
spec:
  replicas: 4
  revisionHistoryLimit: 2
  strategy:
    canary:
      canaryService: myapp-service-canary
      stableService: myapp-service
      steps:
        - setWeight: 25
        - pause: {duration: 2m}
        - setWeight: 50
        - pause: {duration: 3m}
        - setWeight: 100
  selector:
    matchLabels:
      app: myapp
  template:
    metadata:
      labels:
        app: myapp
    spec:
      containers:
        - name: myapp
          image: myrepo/myapp:v1
          ports:
            - containerPort: 8080

#kubectl apply -f rollout.yaml
----------------------------------------------------------------------------------------------------------------------

#Argo needs two services — one for stable, one for canary traffic.

# stable service
apiVersion: v1
kind: Service
metadata:
  name: myapp-service
spec:
  selector:
    app: myapp
  ports:
    - port: 80
      targetPort: 8080
---
# canary service
apiVersion: v1
kind: Service
metadata:
  name: myapp-service-canary
spec:
  selector:
    app: myapp
  ports:
    - port: 80
      targetPort: 8080

#kubectl apply -f services.yaml
----------------------------------------------------------------------------------------------------------------------
#Deploy Ingress for Traffic Control ( Argo Rollouts integration )

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: myapp-ingress
  annotations:
    kubernetes.io/ingress.class: nginx
    argo-rollouts.ingress.kubernetes.io/managed-by: "true"
spec:
  rules:
    - host: myapp.example.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: myapp-service
                port:
                  number: 80

#kubectl apply -f ingress.yaml
----------------------------------------------------------------------------------------------------------------------
#Update App to v2
#Edit the image in rollout.yaml

image: myrepo/myapp:v2
----------------------------------------------------------------------------------------------------------------------
#kubectl apply -f rollout.yaml

#Argo Rollouts provides a CLI dashboard to monitor progress live
#For that install plugin

sudo apt install argoproj/tap/kubectl-argo-rollouts
----------------------------------------------------------------------------------------------------------------------
#To watch rollout
kubectl argo rollouts get rollout myapp --watch
----------------------------------------------------------------------------------------------------------------------
#Validate & Promote Canary
#If the canary (v2) performs well

kubectl argo rollouts promote myapp

#If issues occur, rollback easily

kubectl argo rollouts undo myapp

